const express = require('express');
const router = express.Router();
const db = require('../db/connection');

const ONE_DAY_MS = 24 * 60 * 60 * 1000;

function buildWeek(startISO) {
  if (typeof startISO !== 'string') return null;
  const trimmed = startISO.trim();
  const match = trimmed.match(/^(\d{4})-(\d{2})-(\d{2})$/);
  if (!match) return null;
  const year = Number(match[1]);
  const month = Number(match[2]);
  const day = Number(match[3]);
  const date = new Date(Date.UTC(year, month - 1, day));
  if (Number.isNaN(date.getTime())) return null;
  const dates = [];
  for (let i = 0; i < 7; i += 1) {
    const current = new Date(date.getTime() + i * ONE_DAY_MS);
    dates.push(current.toISOString().slice(0, 10));
  }
  return {
    start: dates[0],
    end: dates[dates.length - 1],
    dates,
  };
}

function toISODate(value) {
  if (!value) return null;
  if (typeof value === 'string') {
    const match = value.match(/^(\d{4}-\d{2}-\d{2})/);
    return match ? match[1] : null;
  }
  const date = value instanceof Date ? value : new Date(value);
  if (Number.isNaN(date.getTime())) return null;
  return date.toISOString().slice(0, 10);
}

function toHHMM(value) {
  if (value === null || value === undefined) return null;
  if (typeof value === 'string') {
    const match = value.match(/^(\d{2}:\d{2})/);
    if (match) return match[1];
    if (value.length >= 5) return value.slice(0, 5);
    return value;
  }
  if (value instanceof Date) return value.toISOString().slice(11, 16);
  const str = String(value);
  const match = str.match(/^(\d{2}:\d{2})/);
  return match ? match[1] : str;
}

// GET /api/horarios/semana?tienda=ID&inicio=YYYY-MM-DD
router.get('/semana', async (req, res) => {
  const { tienda, inicio } = req.query;
  const tiendaId = Number.parseInt(String(tienda || '').trim(), 10);
  if (!Number.isInteger(tiendaId) || tiendaId <= 0) {
    return res.status(400).json({ error: 'Parametro tienda invalido' });
  }

  const week = buildWeek(inicio);
  if (!week) {
    return res.status(400).json({ error: 'Parametro inicio invalido (use YYYY-MM-DD)' });
  }

  try {
    const empleadosRows = await db('Trabajadores as T')
      .join('Usuarios as U', 'U.id_usuario', 'T.id_trabajador')
      .where('T.id_tienda', tiendaId)
      .select('T.id_trabajador', 'U.nombre', 'U.email', 'U.rol')
      .orderBy('U.nombre');

    const empleados = empleadosRows.map((row) => ({
      id_trabajador: row.id_trabajador,
      nombre: row.nombre || row.email || `Trabajador ${row.id_trabajador}`,
      email: row.email || null,
      rol: row.rol || null,
    }));

    const asignacionesRows = await db('AsignacionesTurno as A')
      .join('Turnos as TR', 'TR.id_turno', 'A.id_turno')
      .join('Trabajadores as TB', 'TB.id_trabajador', 'A.id_trabajador')
      .join('Usuarios as U', 'U.id_usuario', 'TB.id_trabajador')
      .where('TR.id_tienda', tiendaId)
      .whereIn('A.fecha', week.dates)
      .select(
        'A.id_asignacion',
        'A.fecha',
        'A.id_trabajador',
        'A.id_turno',
        'TR.hora_inicio',
        'TR.hora_fin',
        'U.nombre as trabajador_nombre'
      )
      .orderBy('A.fecha', 'asc')
      .orderBy('TR.hora_inicio', 'asc')
      .orderBy('U.nombre', 'asc');

    const asignaciones = asignacionesRows
      .map((row) => ({
        id_asignacion: row.id_asignacion || null,
        id_trabajador: row.id_trabajador,
        id_turno: row.id_turno || null,
        nombre: row.trabajador_nombre || '',
        fecha: toISODate(row.fecha),
        hora_inicio: toHHMM(row.hora_inicio),
        hora_fin: toHHMM(row.hora_fin),
      }))
      .filter((row) => row.fecha && row.hora_inicio && row.hora_fin);

    return res.json({
      tienda: tiendaId,
      inicio: week.start,
      fin: week.end,
      empleados,
      asignaciones,
    });
  } catch (err) {
    console.error('[horarios] semana error', err);
    return res.status(500).json({ error: 'Error al consultar horarios' });
  }
});

module.exports = router;
